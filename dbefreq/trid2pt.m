function [var2d,pos] = trid2pt(var3d,lon,lat,opt)%Function [var2d,pos] = trid2pt(var3d,lon,lat,opt)%%  (tri-dim to position-time)%%  Transform a given 3D(y,x,t) array into the usual 2D (position-time).%  Opt = 1 ==> Grid points containing NaNs at all time steps are removed (default).%  Opt = 0 ==> Grid points containing NaNs at all time steps not removed.%%  Inverse operation done by PT2TRID%  3/23/00 jh, modified by DBE 3/21/03% Make sure lat, lon are column vectorslonsz = size(lon); if lonsz(1)==1, lon = lon'; lat = lat'; endif nargin < 4, opt = 1; end               % default = remove all-NaN recordsvar3d = permute(var3d,[3 1 2]);           % make t first so we can use (:,:)sz3d = size(var3d);isize = sz3d(2:3);nstep = sz3d(1);if opt == 1    l = find(sum(isnan(var3d(:,:)))<nstep);   % find time slices with only NaN (like land)else    dummy = ones(sz3d);    l = find(sum(isnan(dummy(:,:)))<nstep);endvar2d = var3d(:,l)';                      % create the 2-D data matrix % create the lon-lat position matrix% change negative west longitudes to degrees east of Greenwichif nargout > 1	ny = floor((l-1)/isize(1)) + 1;	nx = l - (ny-1)*isize(1);	pos = [lon(nx),lat(ny)];    westneg = find(pos(:,1) <= 0);	if ~isempty(westneg), pos(westneg,1) = pos(westneg,1) + 360; endend